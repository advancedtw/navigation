
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <jsi/jsi.h>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>

namespace facebook {
namespace react {

class JSI_EXPORT NVActionBarProps final : public ViewProps {
 public:
  NVActionBarProps() = default;
  NVActionBarProps(const PropsParserContext& context, const NVActionBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

class JSI_EXPORT NVBarButtonProps final : public ViewProps {
 public:
  NVBarButtonProps() = default;
  NVBarButtonProps(const PropsParserContext& context, const NVBarButtonProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string title{};
  std::string fontFamily{};
  std::string fontWeight{};
  std::string fontStyle{};
  Float fontSize{-1.0};
  std::string testID{};
  ImageSource image{};
  std::string systemItem{};
  bool search{false};
  bool showActionView{false};
  int showAsAction{0};
  double buttonWidth{0.0};
  bool actionBar{false};
};

class JSI_EXPORT NVBottomAppBarProps final : public ViewProps {
 public:
  NVBottomAppBarProps() = default;
  NVBottomAppBarProps(const PropsParserContext& context, const NVBottomAppBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  SharedColor barTintColor{};
  SharedColor tintColor{};
  std::string fabAlignmentMode{};
  std::string fabAnimationMode{};
  Float fabCradleMargin{-1.0};
  Float fabCradleRoundedCornerRadius{-1.0};
  Float fabCradleVerticalOffset{-1.0};
  bool hideOnScroll{false};
  ImageSource navigationImage{};
  std::string navigationTestID{};
  ImageSource overflowImage{};
  std::string overflowTestID{};
  double barHeight{0.0};
};

class JSI_EXPORT NVBottomSheetProps final : public ViewProps {
 public:
  NVBottomSheetProps() = default;
  NVBottomSheetProps(const PropsParserContext& context, const NVBottomSheetProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int detent{0};
  int mostRecentEventCount{0};
  int peekHeight{0};
  int expandedOffset{0};
  bool fitToContents{false};
  Float halfExpandedRatio{-1.0};
  bool hideable{false};
  bool skipCollapsed{false};
  bool draggable{false};
  double sheetHeight{0.0};
};

class JSI_EXPORT NVCollapsingBarProps final : public ViewProps {
 public:
  NVCollapsingBarProps() = default;
  NVCollapsingBarProps(const PropsParserContext& context, const NVCollapsingBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string title{};
  std::string titleFontFamily{};
  std::string titleFontWeight{};
  std::string titleFontStyle{};
  std::string largeTitleFontFamily{};
  std::string largeTitleFontWeight{};
  std::string largeTitleFontStyle{};
  bool titleEnabled{false};
  std::string titleCollapseMode{};
  SharedColor contentScrimColor{};
  SharedColor collapsedTitleColor{};
  SharedColor expandedTitleColor{};
};

class JSI_EXPORT NVCoordinatorLayoutProps final : public ViewProps {
 public:
  NVCoordinatorLayoutProps() = default;
  NVCoordinatorLayoutProps(const PropsParserContext& context, const NVCoordinatorLayoutProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int overlap{0};
};

class JSI_EXPORT NVExtendedFloatingActionButtonProps final : public ViewProps {
 public:
  NVExtendedFloatingActionButtonProps() = default;
  NVExtendedFloatingActionButtonProps(const PropsParserContext& context, const NVExtendedFloatingActionButtonProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ImageSource image{};
  std::string text{};
  std::string gravity{};
  std::string anchor{};
  std::string anchorGravity{};
  std::string contentDescription{};
  std::string testID{};
  SharedColor fabColor{};
  SharedColor fabBackgroundColor{};
  SharedColor rippleColor{};
  int fabMarginTop{0};
  int fabMarginRight{0};
  int fabMarginBottom{0};
  int fabMarginLeft{0};
  int fabMarginStart{0};
  int fabMarginEnd{0};
  int fabMargin{0};
  std::string fabFontFamily{};
  std::string fabFontWeight{};
  std::string fabFontStyle{};
  Float fabFontSize{-1.0};
};

class JSI_EXPORT NVFloatingActionButtonProps final : public ViewProps {
 public:
  NVFloatingActionButtonProps() = default;
  NVFloatingActionButtonProps(const PropsParserContext& context, const NVFloatingActionButtonProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ImageSource image{};
  std::string gravity{};
  std::string anchor{};
  std::string anchorGravity{};
  int size{0};
  std::string contentDescription{};
  std::string testID{};
  SharedColor fabColor{};
  SharedColor fabBackgroundColor{};
  SharedColor rippleColor{};
  int fabMarginTop{0};
  int fabMarginRight{0};
  int fabMarginBottom{0};
  int fabMarginLeft{0};
  int fabMarginStart{0};
  int fabMarginEnd{0};
  int fabMargin{0};
  int fabElevation{0};
};

class JSI_EXPORT NVLeftBarProps final : public ViewProps {
 public:
  NVLeftBarProps() = default;
  NVLeftBarProps(const PropsParserContext& context, const NVLeftBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool supplementBack{false};
};

class JSI_EXPORT NVNavigationBarProps final : public ViewProps {
 public:
  NVNavigationBarProps() = default;
  NVNavigationBarProps(const PropsParserContext& context, const NVNavigationBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool hidden{false};
  bool largeTitle{false};
  std::string title{};
  std::string titleFontFamily{};
  std::string titleFontWeight{};
  std::string titleFontStyle{};
  Float titleFontSize{-1.0};
  std::string largeTitleFontFamily{};
  std::string largeTitleFontWeight{};
  std::string largeTitleFontStyle{};
  Float largeTitleFontSize{-1.0};
  std::string backFontFamily{};
  std::string backFontWeight{};
  std::string backFontStyle{};
  Float backFontSize{-1.0};
  SharedColor barTintColor{};
  SharedColor largeBarTintColor{};
  SharedColor tintColor{};
  SharedColor titleColor{};
  SharedColor largeTitleColor{};
  std::string backTitle{};
  bool backTitleOn{false};
  std::string backTestID{};
  double barHeight{0.0};
};

class JSI_EXPORT NVNavigationStackProps final : public ViewProps {
 public:
  NVNavigationStackProps() = default;
  NVNavigationStackProps(const PropsParserContext& context, const NVNavigationStackProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::vector<std::string> keys{};
  std::string enterAnim{};
  std::string exitAnim{};
  bool enterAnimOff{false};
  std::string sharedElement{};
  std::string oldSharedElement{};
  int mostRecentEventCount{0};
};

class JSI_EXPORT NVRightBarProps final : public ViewProps {
 public:
  NVRightBarProps() = default;
  NVRightBarProps(const PropsParserContext& context, const NVRightBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

class JSI_EXPORT NVSceneProps final : public ViewProps {
 public:
  NVSceneProps() = default;
  NVSceneProps(const PropsParserContext& context, const NVSceneProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string sceneKey{};
  int crumb{0};
  std::string title{};
  std::string enterAnim{};
  std::string exitAnim{};
  bool hidesTabBar{false};
};

class JSI_EXPORT NVSearchBarProps final : public ViewProps {
 public:
  NVSearchBarProps() = default;
  NVSearchBarProps(const PropsParserContext& context, const NVSearchBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool obscureBackground{false};
  bool hideNavigationBar{false};
  bool hideWhenScrolling{false};
  std::string autoCapitalize{};
  std::string placeholder{};
  std::string text{};
  int mostRecentEventCount{0};
  int mostRecentButtonEventCount{0};
  SharedColor barTintColor{};
  bool bottomBar{false};
  int scopeButton{0};
  std::vector<std::string> scopeButtons{};
};

class JSI_EXPORT NVSegmentedTabProps final : public ViewProps {
 public:
  NVSegmentedTabProps() = default;
  NVSegmentedTabProps(const PropsParserContext& context, const NVSegmentedTabProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  SharedColor backgroundColor{};
  SharedColor selectedTintColor{};
  SharedColor unselectedTintColor{};
  std::vector<std::string> titles{};
  std::vector<std::string> testIDs{};
  std::string fontFamily{};
  std::string fontWeight{};
  std::string fontStyle{};
  Float fontSize{-1.0};
};

class JSI_EXPORT NVSharedElementProps final : public ViewProps {
 public:
  NVSharedElementProps() = default;
  NVSharedElementProps(const PropsParserContext& context, const NVSharedElementProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string name{};
  int duration{-1};
  std::string fadeMode{};
};

class JSI_EXPORT NVStatusBarProps final : public ViewProps {
 public:
  NVStatusBarProps() = default;
  NVStatusBarProps(const PropsParserContext& context, const NVStatusBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool hidden{false};
  std::string tintStyle{};
  SharedColor barTintColor{};
};

class JSI_EXPORT NVTabBarItemProps final : public ViewProps {
 public:
  NVTabBarItemProps() = default;
  NVTabBarItemProps(const PropsParserContext& context, const NVTabBarItemProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string title{};
  std::string fontFamily{};
  std::string fontWeight{};
  std::string fontStyle{};
  Float fontSize{-1.0};
  std::string testID{};
  std::string badge{};
  SharedColor badgeColor{};
  ImageSource image{};
  std::string systemItem{};
};

class JSI_EXPORT NVTabBarProps final : public ViewProps {
 public:
  NVTabBarProps() = default;
  NVTabBarProps(const PropsParserContext& context, const NVTabBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int tabCount{0};
  int selectedTab{0};
  SharedColor barTintColor{};
  SharedColor selectedTintColor{};
  SharedColor unselectedTintColor{};
  SharedColor badgeColor{};
  bool scrollsToTop{false};
  std::string fontFamily{};
  std::string fontWeight{};
  std::string fontStyle{};
  Float fontSize{-1.0};
  int mostRecentEventCount{0};
};

class JSI_EXPORT NVTabBarPagerProps final : public ViewProps {
 public:
  NVTabBarPagerProps() = default;
  NVTabBarPagerProps(const PropsParserContext& context, const NVTabBarPagerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int tabCount{0};
  int selectedTab{0};
  bool scrollsToTop{false};
  int mostRecentEventCount{0};
};

class JSI_EXPORT NVTabBarPagerRTLProps final : public ViewProps {
 public:
  NVTabBarPagerRTLProps() = default;
  NVTabBarPagerRTLProps(const PropsParserContext& context, const NVTabBarPagerRTLProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int tabCount{0};
  int selectedTab{0};
  bool scrollsToTop{false};
  int mostRecentEventCount{0};
};

class JSI_EXPORT NVTabLayoutProps final : public ViewProps {
 public:
  NVTabLayoutProps() = default;
  NVTabLayoutProps(const PropsParserContext& context, const NVTabLayoutProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  SharedColor selectedTintColor{};
  SharedColor unselectedTintColor{};
  SharedColor rippleColor{};
  bool bottomTabs{false};
  bool selectedIndicatorAtTop{false};
  bool scrollable{false};
};

class JSI_EXPORT NVTabLayoutRTLProps final : public ViewProps {
 public:
  NVTabLayoutRTLProps() = default;
  NVTabLayoutRTLProps(const PropsParserContext& context, const NVTabLayoutRTLProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  SharedColor selectedTintColor{};
  SharedColor unselectedTintColor{};
  SharedColor rippleColor{};
  bool selectedIndicatorAtTop{false};
  bool scrollable{false};
};

class JSI_EXPORT NVTabNavigationProps final : public ViewProps {
 public:
  NVTabNavigationProps() = default;
  NVTabNavigationProps(const PropsParserContext& context, const NVTabNavigationProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  SharedColor selectedTintColor{};
  SharedColor unselectedTintColor{};
  bool bottomTabs{false};
  bool itemHorizontalTranslation{false};
  int labelVisibilityMode{0};
  SharedColor activeIndicatorColor{};
  SharedColor rippleColor{};
};

class JSI_EXPORT NVTitleBarProps final : public ViewProps {
 public:
  NVTitleBarProps() = default;
  NVTitleBarProps(const PropsParserContext& context, const NVTitleBarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

class JSI_EXPORT NVToolbarProps final : public ViewProps {
 public:
  NVToolbarProps() = default;
  NVToolbarProps(const PropsParserContext& context, const NVToolbarProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string title{};
  std::string titleFontFamily{};
  std::string titleFontWeight{};
  std::string titleFontStyle{};
  Float titleFontSize{-1.0};
  bool titleCentered{false};
  SharedColor barTintColor{};
  SharedColor tintColor{};
  SharedColor titleColor{};
  ImageSource navigationImage{};
  std::string navigationTestID{};
  std::string navigationAccessibilityLabel{};
  ImageSource logo{};
  ImageSource overflowImage{};
  std::string overflowTestID{};
  bool pin{false};
  double barHeight{0.0};
};

} // namespace react
} // namespace facebook
