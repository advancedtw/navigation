
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/navigationreactnative/Props.h>
#include <react/renderer/components/image/conversions.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook {
namespace react {

NVActionBarProps::NVActionBarProps(
    const PropsParserContext &context,
    const NVActionBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

    
      {}
NVBarButtonProps::NVBarButtonProps(
    const PropsParserContext &context,
    const NVBarButtonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
    fontFamily(convertRawProp(context, rawProps, "fontFamily", sourceProps.fontFamily, {})),
    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
    fontStyle(convertRawProp(context, rawProps, "fontStyle", sourceProps.fontStyle, {})),
    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {-1.0})),
    testID(convertRawProp(context, rawProps, "testID", sourceProps.testID, {})),
    image(convertRawProp(context, rawProps, "image", sourceProps.image, {})),
    systemItem(convertRawProp(context, rawProps, "systemItem", sourceProps.systemItem, {})),
    search(convertRawProp(context, rawProps, "search", sourceProps.search, {false})),
    showActionView(convertRawProp(context, rawProps, "showActionView", sourceProps.showActionView, {false})),
    showAsAction(convertRawProp(context, rawProps, "showAsAction", sourceProps.showAsAction, {0})),
    buttonWidth(convertRawProp(context, rawProps, "buttonWidth", sourceProps.buttonWidth, {0.0})),
    actionBar(convertRawProp(context, rawProps, "actionBar", sourceProps.actionBar, {false}))
      {}
NVBottomAppBarProps::NVBottomAppBarProps(
    const PropsParserContext &context,
    const NVBottomAppBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    barTintColor(convertRawProp(context, rawProps, "barTintColor", sourceProps.barTintColor, {})),
    tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {})),
    fabAlignmentMode(convertRawProp(context, rawProps, "fabAlignmentMode", sourceProps.fabAlignmentMode, {})),
    fabAnimationMode(convertRawProp(context, rawProps, "fabAnimationMode", sourceProps.fabAnimationMode, {})),
    fabCradleMargin(convertRawProp(context, rawProps, "fabCradleMargin", sourceProps.fabCradleMargin, {-1.0})),
    fabCradleRoundedCornerRadius(convertRawProp(context, rawProps, "fabCradleRoundedCornerRadius", sourceProps.fabCradleRoundedCornerRadius, {-1.0})),
    fabCradleVerticalOffset(convertRawProp(context, rawProps, "fabCradleVerticalOffset", sourceProps.fabCradleVerticalOffset, {-1.0})),
    hideOnScroll(convertRawProp(context, rawProps, "hideOnScroll", sourceProps.hideOnScroll, {false})),
    navigationImage(convertRawProp(context, rawProps, "navigationImage", sourceProps.navigationImage, {})),
    navigationTestID(convertRawProp(context, rawProps, "navigationTestID", sourceProps.navigationTestID, {})),
    overflowImage(convertRawProp(context, rawProps, "overflowImage", sourceProps.overflowImage, {})),
    overflowTestID(convertRawProp(context, rawProps, "overflowTestID", sourceProps.overflowTestID, {})),
    barHeight(convertRawProp(context, rawProps, "barHeight", sourceProps.barHeight, {0.0}))
      {}
NVBottomSheetProps::NVBottomSheetProps(
    const PropsParserContext &context,
    const NVBottomSheetProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    detent(convertRawProp(context, rawProps, "detent", sourceProps.detent, {0})),
    mostRecentEventCount(convertRawProp(context, rawProps, "mostRecentEventCount", sourceProps.mostRecentEventCount, {0})),
    peekHeight(convertRawProp(context, rawProps, "peekHeight", sourceProps.peekHeight, {0})),
    expandedOffset(convertRawProp(context, rawProps, "expandedOffset", sourceProps.expandedOffset, {0})),
    fitToContents(convertRawProp(context, rawProps, "fitToContents", sourceProps.fitToContents, {false})),
    halfExpandedRatio(convertRawProp(context, rawProps, "halfExpandedRatio", sourceProps.halfExpandedRatio, {-1.0})),
    hideable(convertRawProp(context, rawProps, "hideable", sourceProps.hideable, {false})),
    skipCollapsed(convertRawProp(context, rawProps, "skipCollapsed", sourceProps.skipCollapsed, {false})),
    draggable(convertRawProp(context, rawProps, "draggable", sourceProps.draggable, {false})),
    sheetHeight(convertRawProp(context, rawProps, "sheetHeight", sourceProps.sheetHeight, {0.0}))
      {}
NVCollapsingBarProps::NVCollapsingBarProps(
    const PropsParserContext &context,
    const NVCollapsingBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
    titleFontFamily(convertRawProp(context, rawProps, "titleFontFamily", sourceProps.titleFontFamily, {})),
    titleFontWeight(convertRawProp(context, rawProps, "titleFontWeight", sourceProps.titleFontWeight, {})),
    titleFontStyle(convertRawProp(context, rawProps, "titleFontStyle", sourceProps.titleFontStyle, {})),
    largeTitleFontFamily(convertRawProp(context, rawProps, "largeTitleFontFamily", sourceProps.largeTitleFontFamily, {})),
    largeTitleFontWeight(convertRawProp(context, rawProps, "largeTitleFontWeight", sourceProps.largeTitleFontWeight, {})),
    largeTitleFontStyle(convertRawProp(context, rawProps, "largeTitleFontStyle", sourceProps.largeTitleFontStyle, {})),
    titleEnabled(convertRawProp(context, rawProps, "titleEnabled", sourceProps.titleEnabled, {false})),
    titleCollapseMode(convertRawProp(context, rawProps, "titleCollapseMode", sourceProps.titleCollapseMode, {})),
    contentScrimColor(convertRawProp(context, rawProps, "contentScrimColor", sourceProps.contentScrimColor, {})),
    collapsedTitleColor(convertRawProp(context, rawProps, "collapsedTitleColor", sourceProps.collapsedTitleColor, {})),
    expandedTitleColor(convertRawProp(context, rawProps, "expandedTitleColor", sourceProps.expandedTitleColor, {}))
      {}
NVCoordinatorLayoutProps::NVCoordinatorLayoutProps(
    const PropsParserContext &context,
    const NVCoordinatorLayoutProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    overlap(convertRawProp(context, rawProps, "overlap", sourceProps.overlap, {0}))
      {}
NVExtendedFloatingActionButtonProps::NVExtendedFloatingActionButtonProps(
    const PropsParserContext &context,
    const NVExtendedFloatingActionButtonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    image(convertRawProp(context, rawProps, "image", sourceProps.image, {})),
    text(convertRawProp(context, rawProps, "text", sourceProps.text, {})),
    gravity(convertRawProp(context, rawProps, "gravity", sourceProps.gravity, {})),
    anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {})),
    anchorGravity(convertRawProp(context, rawProps, "anchorGravity", sourceProps.anchorGravity, {})),
    contentDescription(convertRawProp(context, rawProps, "contentDescription", sourceProps.contentDescription, {})),
    testID(convertRawProp(context, rawProps, "testID", sourceProps.testID, {})),
    fabColor(convertRawProp(context, rawProps, "fabColor", sourceProps.fabColor, {})),
    fabBackgroundColor(convertRawProp(context, rawProps, "fabBackgroundColor", sourceProps.fabBackgroundColor, {})),
    rippleColor(convertRawProp(context, rawProps, "rippleColor", sourceProps.rippleColor, {})),
    fabMarginTop(convertRawProp(context, rawProps, "fabMarginTop", sourceProps.fabMarginTop, {0})),
    fabMarginRight(convertRawProp(context, rawProps, "fabMarginRight", sourceProps.fabMarginRight, {0})),
    fabMarginBottom(convertRawProp(context, rawProps, "fabMarginBottom", sourceProps.fabMarginBottom, {0})),
    fabMarginLeft(convertRawProp(context, rawProps, "fabMarginLeft", sourceProps.fabMarginLeft, {0})),
    fabMarginStart(convertRawProp(context, rawProps, "fabMarginStart", sourceProps.fabMarginStart, {0})),
    fabMarginEnd(convertRawProp(context, rawProps, "fabMarginEnd", sourceProps.fabMarginEnd, {0})),
    fabMargin(convertRawProp(context, rawProps, "fabMargin", sourceProps.fabMargin, {0})),
    fabFontFamily(convertRawProp(context, rawProps, "fabFontFamily", sourceProps.fabFontFamily, {})),
    fabFontWeight(convertRawProp(context, rawProps, "fabFontWeight", sourceProps.fabFontWeight, {})),
    fabFontStyle(convertRawProp(context, rawProps, "fabFontStyle", sourceProps.fabFontStyle, {})),
    fabFontSize(convertRawProp(context, rawProps, "fabFontSize", sourceProps.fabFontSize, {-1.0}))
      {}
NVFloatingActionButtonProps::NVFloatingActionButtonProps(
    const PropsParserContext &context,
    const NVFloatingActionButtonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    image(convertRawProp(context, rawProps, "image", sourceProps.image, {})),
    gravity(convertRawProp(context, rawProps, "gravity", sourceProps.gravity, {})),
    anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {})),
    anchorGravity(convertRawProp(context, rawProps, "anchorGravity", sourceProps.anchorGravity, {})),
    size(convertRawProp(context, rawProps, "size", sourceProps.size, {0})),
    contentDescription(convertRawProp(context, rawProps, "contentDescription", sourceProps.contentDescription, {})),
    testID(convertRawProp(context, rawProps, "testID", sourceProps.testID, {})),
    fabColor(convertRawProp(context, rawProps, "fabColor", sourceProps.fabColor, {})),
    fabBackgroundColor(convertRawProp(context, rawProps, "fabBackgroundColor", sourceProps.fabBackgroundColor, {})),
    rippleColor(convertRawProp(context, rawProps, "rippleColor", sourceProps.rippleColor, {})),
    fabMarginTop(convertRawProp(context, rawProps, "fabMarginTop", sourceProps.fabMarginTop, {0})),
    fabMarginRight(convertRawProp(context, rawProps, "fabMarginRight", sourceProps.fabMarginRight, {0})),
    fabMarginBottom(convertRawProp(context, rawProps, "fabMarginBottom", sourceProps.fabMarginBottom, {0})),
    fabMarginLeft(convertRawProp(context, rawProps, "fabMarginLeft", sourceProps.fabMarginLeft, {0})),
    fabMarginStart(convertRawProp(context, rawProps, "fabMarginStart", sourceProps.fabMarginStart, {0})),
    fabMarginEnd(convertRawProp(context, rawProps, "fabMarginEnd", sourceProps.fabMarginEnd, {0})),
    fabMargin(convertRawProp(context, rawProps, "fabMargin", sourceProps.fabMargin, {0})),
    fabElevation(convertRawProp(context, rawProps, "fabElevation", sourceProps.fabElevation, {0}))
      {}
NVLeftBarProps::NVLeftBarProps(
    const PropsParserContext &context,
    const NVLeftBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    supplementBack(convertRawProp(context, rawProps, "supplementBack", sourceProps.supplementBack, {false}))
      {}
NVNavigationBarProps::NVNavigationBarProps(
    const PropsParserContext &context,
    const NVNavigationBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    hidden(convertRawProp(context, rawProps, "hidden", sourceProps.hidden, {false})),
    largeTitle(convertRawProp(context, rawProps, "largeTitle", sourceProps.largeTitle, {false})),
    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
    titleFontFamily(convertRawProp(context, rawProps, "titleFontFamily", sourceProps.titleFontFamily, {})),
    titleFontWeight(convertRawProp(context, rawProps, "titleFontWeight", sourceProps.titleFontWeight, {})),
    titleFontStyle(convertRawProp(context, rawProps, "titleFontStyle", sourceProps.titleFontStyle, {})),
    titleFontSize(convertRawProp(context, rawProps, "titleFontSize", sourceProps.titleFontSize, {-1.0})),
    largeTitleFontFamily(convertRawProp(context, rawProps, "largeTitleFontFamily", sourceProps.largeTitleFontFamily, {})),
    largeTitleFontWeight(convertRawProp(context, rawProps, "largeTitleFontWeight", sourceProps.largeTitleFontWeight, {})),
    largeTitleFontStyle(convertRawProp(context, rawProps, "largeTitleFontStyle", sourceProps.largeTitleFontStyle, {})),
    largeTitleFontSize(convertRawProp(context, rawProps, "largeTitleFontSize", sourceProps.largeTitleFontSize, {-1.0})),
    backFontFamily(convertRawProp(context, rawProps, "backFontFamily", sourceProps.backFontFamily, {})),
    backFontWeight(convertRawProp(context, rawProps, "backFontWeight", sourceProps.backFontWeight, {})),
    backFontStyle(convertRawProp(context, rawProps, "backFontStyle", sourceProps.backFontStyle, {})),
    backFontSize(convertRawProp(context, rawProps, "backFontSize", sourceProps.backFontSize, {-1.0})),
    barTintColor(convertRawProp(context, rawProps, "barTintColor", sourceProps.barTintColor, {})),
    largeBarTintColor(convertRawProp(context, rawProps, "largeBarTintColor", sourceProps.largeBarTintColor, {})),
    tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {})),
    titleColor(convertRawProp(context, rawProps, "titleColor", sourceProps.titleColor, {})),
    largeTitleColor(convertRawProp(context, rawProps, "largeTitleColor", sourceProps.largeTitleColor, {})),
    backTitle(convertRawProp(context, rawProps, "backTitle", sourceProps.backTitle, {})),
    backTitleOn(convertRawProp(context, rawProps, "backTitleOn", sourceProps.backTitleOn, {false})),
    backTestID(convertRawProp(context, rawProps, "backTestID", sourceProps.backTestID, {})),
    barHeight(convertRawProp(context, rawProps, "barHeight", sourceProps.barHeight, {0.0}))
      {}
NVNavigationStackProps::NVNavigationStackProps(
    const PropsParserContext &context,
    const NVNavigationStackProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    keys(convertRawProp(context, rawProps, "keys", sourceProps.keys, {})),
    enterAnim(convertRawProp(context, rawProps, "enterAnim", sourceProps.enterAnim, {})),
    exitAnim(convertRawProp(context, rawProps, "exitAnim", sourceProps.exitAnim, {})),
    enterAnimOff(convertRawProp(context, rawProps, "enterAnimOff", sourceProps.enterAnimOff, {false})),
    sharedElement(convertRawProp(context, rawProps, "sharedElement", sourceProps.sharedElement, {})),
    oldSharedElement(convertRawProp(context, rawProps, "oldSharedElement", sourceProps.oldSharedElement, {})),
    mostRecentEventCount(convertRawProp(context, rawProps, "mostRecentEventCount", sourceProps.mostRecentEventCount, {0}))
      {}
NVRightBarProps::NVRightBarProps(
    const PropsParserContext &context,
    const NVRightBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

    
      {}
NVSceneProps::NVSceneProps(
    const PropsParserContext &context,
    const NVSceneProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sceneKey(convertRawProp(context, rawProps, "sceneKey", sourceProps.sceneKey, {})),
    crumb(convertRawProp(context, rawProps, "crumb", sourceProps.crumb, {0})),
    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
    enterAnim(convertRawProp(context, rawProps, "enterAnim", sourceProps.enterAnim, {})),
    exitAnim(convertRawProp(context, rawProps, "exitAnim", sourceProps.exitAnim, {})),
    hidesTabBar(convertRawProp(context, rawProps, "hidesTabBar", sourceProps.hidesTabBar, {false}))
      {}
NVSearchBarProps::NVSearchBarProps(
    const PropsParserContext &context,
    const NVSearchBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    obscureBackground(convertRawProp(context, rawProps, "obscureBackground", sourceProps.obscureBackground, {false})),
    hideNavigationBar(convertRawProp(context, rawProps, "hideNavigationBar", sourceProps.hideNavigationBar, {false})),
    hideWhenScrolling(convertRawProp(context, rawProps, "hideWhenScrolling", sourceProps.hideWhenScrolling, {false})),
    autoCapitalize(convertRawProp(context, rawProps, "autoCapitalize", sourceProps.autoCapitalize, {})),
    placeholder(convertRawProp(context, rawProps, "placeholder", sourceProps.placeholder, {})),
    text(convertRawProp(context, rawProps, "text", sourceProps.text, {})),
    mostRecentEventCount(convertRawProp(context, rawProps, "mostRecentEventCount", sourceProps.mostRecentEventCount, {0})),
    mostRecentButtonEventCount(convertRawProp(context, rawProps, "mostRecentButtonEventCount", sourceProps.mostRecentButtonEventCount, {0})),
    barTintColor(convertRawProp(context, rawProps, "barTintColor", sourceProps.barTintColor, {})),
    bottomBar(convertRawProp(context, rawProps, "bottomBar", sourceProps.bottomBar, {false})),
    scopeButton(convertRawProp(context, rawProps, "scopeButton", sourceProps.scopeButton, {0})),
    scopeButtons(convertRawProp(context, rawProps, "scopeButtons", sourceProps.scopeButtons, {}))
      {}
NVSegmentedTabProps::NVSegmentedTabProps(
    const PropsParserContext &context,
    const NVSegmentedTabProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    backgroundColor(convertRawProp(context, rawProps, "backgroundColor", sourceProps.backgroundColor, {})),
    selectedTintColor(convertRawProp(context, rawProps, "selectedTintColor", sourceProps.selectedTintColor, {})),
    unselectedTintColor(convertRawProp(context, rawProps, "unselectedTintColor", sourceProps.unselectedTintColor, {})),
    titles(convertRawProp(context, rawProps, "titles", sourceProps.titles, {})),
    testIDs(convertRawProp(context, rawProps, "testIDs", sourceProps.testIDs, {})),
    fontFamily(convertRawProp(context, rawProps, "fontFamily", sourceProps.fontFamily, {})),
    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
    fontStyle(convertRawProp(context, rawProps, "fontStyle", sourceProps.fontStyle, {})),
    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {-1.0}))
      {}
NVSharedElementProps::NVSharedElementProps(
    const PropsParserContext &context,
    const NVSharedElementProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
    duration(convertRawProp(context, rawProps, "duration", sourceProps.duration, {-1})),
    fadeMode(convertRawProp(context, rawProps, "fadeMode", sourceProps.fadeMode, {}))
      {}
NVStatusBarProps::NVStatusBarProps(
    const PropsParserContext &context,
    const NVStatusBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    hidden(convertRawProp(context, rawProps, "hidden", sourceProps.hidden, {false})),
    tintStyle(convertRawProp(context, rawProps, "tintStyle", sourceProps.tintStyle, {})),
    barTintColor(convertRawProp(context, rawProps, "barTintColor", sourceProps.barTintColor, {}))
      {}
NVTabBarItemProps::NVTabBarItemProps(
    const PropsParserContext &context,
    const NVTabBarItemProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
    fontFamily(convertRawProp(context, rawProps, "fontFamily", sourceProps.fontFamily, {})),
    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
    fontStyle(convertRawProp(context, rawProps, "fontStyle", sourceProps.fontStyle, {})),
    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {-1.0})),
    testID(convertRawProp(context, rawProps, "testID", sourceProps.testID, {})),
    badge(convertRawProp(context, rawProps, "badge", sourceProps.badge, {})),
    badgeColor(convertRawProp(context, rawProps, "badgeColor", sourceProps.badgeColor, {})),
    image(convertRawProp(context, rawProps, "image", sourceProps.image, {})),
    systemItem(convertRawProp(context, rawProps, "systemItem", sourceProps.systemItem, {}))
      {}
NVTabBarProps::NVTabBarProps(
    const PropsParserContext &context,
    const NVTabBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    tabCount(convertRawProp(context, rawProps, "tabCount", sourceProps.tabCount, {0})),
    selectedTab(convertRawProp(context, rawProps, "selectedTab", sourceProps.selectedTab, {0})),
    barTintColor(convertRawProp(context, rawProps, "barTintColor", sourceProps.barTintColor, {})),
    selectedTintColor(convertRawProp(context, rawProps, "selectedTintColor", sourceProps.selectedTintColor, {})),
    unselectedTintColor(convertRawProp(context, rawProps, "unselectedTintColor", sourceProps.unselectedTintColor, {})),
    badgeColor(convertRawProp(context, rawProps, "badgeColor", sourceProps.badgeColor, {})),
    scrollsToTop(convertRawProp(context, rawProps, "scrollsToTop", sourceProps.scrollsToTop, {false})),
    fontFamily(convertRawProp(context, rawProps, "fontFamily", sourceProps.fontFamily, {})),
    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
    fontStyle(convertRawProp(context, rawProps, "fontStyle", sourceProps.fontStyle, {})),
    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {-1.0})),
    mostRecentEventCount(convertRawProp(context, rawProps, "mostRecentEventCount", sourceProps.mostRecentEventCount, {0}))
      {}
NVTabBarPagerProps::NVTabBarPagerProps(
    const PropsParserContext &context,
    const NVTabBarPagerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    tabCount(convertRawProp(context, rawProps, "tabCount", sourceProps.tabCount, {0})),
    selectedTab(convertRawProp(context, rawProps, "selectedTab", sourceProps.selectedTab, {0})),
    scrollsToTop(convertRawProp(context, rawProps, "scrollsToTop", sourceProps.scrollsToTop, {false})),
    mostRecentEventCount(convertRawProp(context, rawProps, "mostRecentEventCount", sourceProps.mostRecentEventCount, {0}))
      {}
NVTabBarPagerRTLProps::NVTabBarPagerRTLProps(
    const PropsParserContext &context,
    const NVTabBarPagerRTLProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    tabCount(convertRawProp(context, rawProps, "tabCount", sourceProps.tabCount, {0})),
    selectedTab(convertRawProp(context, rawProps, "selectedTab", sourceProps.selectedTab, {0})),
    scrollsToTop(convertRawProp(context, rawProps, "scrollsToTop", sourceProps.scrollsToTop, {false})),
    mostRecentEventCount(convertRawProp(context, rawProps, "mostRecentEventCount", sourceProps.mostRecentEventCount, {0}))
      {}
NVTabLayoutProps::NVTabLayoutProps(
    const PropsParserContext &context,
    const NVTabLayoutProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    selectedTintColor(convertRawProp(context, rawProps, "selectedTintColor", sourceProps.selectedTintColor, {})),
    unselectedTintColor(convertRawProp(context, rawProps, "unselectedTintColor", sourceProps.unselectedTintColor, {})),
    rippleColor(convertRawProp(context, rawProps, "rippleColor", sourceProps.rippleColor, {})),
    bottomTabs(convertRawProp(context, rawProps, "bottomTabs", sourceProps.bottomTabs, {false})),
    selectedIndicatorAtTop(convertRawProp(context, rawProps, "selectedIndicatorAtTop", sourceProps.selectedIndicatorAtTop, {false})),
    scrollable(convertRawProp(context, rawProps, "scrollable", sourceProps.scrollable, {false}))
      {}
NVTabLayoutRTLProps::NVTabLayoutRTLProps(
    const PropsParserContext &context,
    const NVTabLayoutRTLProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    selectedTintColor(convertRawProp(context, rawProps, "selectedTintColor", sourceProps.selectedTintColor, {})),
    unselectedTintColor(convertRawProp(context, rawProps, "unselectedTintColor", sourceProps.unselectedTintColor, {})),
    rippleColor(convertRawProp(context, rawProps, "rippleColor", sourceProps.rippleColor, {})),
    selectedIndicatorAtTop(convertRawProp(context, rawProps, "selectedIndicatorAtTop", sourceProps.selectedIndicatorAtTop, {false})),
    scrollable(convertRawProp(context, rawProps, "scrollable", sourceProps.scrollable, {false}))
      {}
NVTabNavigationProps::NVTabNavigationProps(
    const PropsParserContext &context,
    const NVTabNavigationProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    selectedTintColor(convertRawProp(context, rawProps, "selectedTintColor", sourceProps.selectedTintColor, {})),
    unselectedTintColor(convertRawProp(context, rawProps, "unselectedTintColor", sourceProps.unselectedTintColor, {})),
    bottomTabs(convertRawProp(context, rawProps, "bottomTabs", sourceProps.bottomTabs, {false})),
    itemHorizontalTranslation(convertRawProp(context, rawProps, "itemHorizontalTranslation", sourceProps.itemHorizontalTranslation, {false})),
    labelVisibilityMode(convertRawProp(context, rawProps, "labelVisibilityMode", sourceProps.labelVisibilityMode, {0})),
    activeIndicatorColor(convertRawProp(context, rawProps, "activeIndicatorColor", sourceProps.activeIndicatorColor, {})),
    rippleColor(convertRawProp(context, rawProps, "rippleColor", sourceProps.rippleColor, {}))
      {}
NVTitleBarProps::NVTitleBarProps(
    const PropsParserContext &context,
    const NVTitleBarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

    
      {}
NVToolbarProps::NVToolbarProps(
    const PropsParserContext &context,
    const NVToolbarProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
    titleFontFamily(convertRawProp(context, rawProps, "titleFontFamily", sourceProps.titleFontFamily, {})),
    titleFontWeight(convertRawProp(context, rawProps, "titleFontWeight", sourceProps.titleFontWeight, {})),
    titleFontStyle(convertRawProp(context, rawProps, "titleFontStyle", sourceProps.titleFontStyle, {})),
    titleFontSize(convertRawProp(context, rawProps, "titleFontSize", sourceProps.titleFontSize, {-1.0})),
    titleCentered(convertRawProp(context, rawProps, "titleCentered", sourceProps.titleCentered, {false})),
    barTintColor(convertRawProp(context, rawProps, "barTintColor", sourceProps.barTintColor, {})),
    tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {})),
    titleColor(convertRawProp(context, rawProps, "titleColor", sourceProps.titleColor, {})),
    navigationImage(convertRawProp(context, rawProps, "navigationImage", sourceProps.navigationImage, {})),
    navigationTestID(convertRawProp(context, rawProps, "navigationTestID", sourceProps.navigationTestID, {})),
    navigationAccessibilityLabel(convertRawProp(context, rawProps, "navigationAccessibilityLabel", sourceProps.navigationAccessibilityLabel, {})),
    logo(convertRawProp(context, rawProps, "logo", sourceProps.logo, {})),
    overflowImage(convertRawProp(context, rawProps, "overflowImage", sourceProps.overflowImage, {})),
    overflowTestID(convertRawProp(context, rawProps, "overflowTestID", sourceProps.overflowTestID, {})),
    pin(convertRawProp(context, rawProps, "pin", sourceProps.pin, {false})),
    barHeight(convertRawProp(context, rawProps, "barHeight", sourceProps.barHeight, {0.0}))
      {}

} // namespace react
} // namespace facebook
