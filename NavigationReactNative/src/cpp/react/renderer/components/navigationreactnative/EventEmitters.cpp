
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include "EventEmitters.h"

namespace facebook {
namespace react {

void NVActionBarEventEmitter::onExpanded(OnExpanded event) const {
  dispatchEvent("expanded", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void NVActionBarEventEmitter::onCollapsed(OnCollapsed event) const {
  dispatchEvent("collapsed", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void NVBarButtonEventEmitter::onPress(OnPress event) const {
  dispatchEvent("press", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void NVBottomAppBarEventEmitter::onNavigationPress(OnNavigationPress event) const {
  dispatchEvent("navigationPress", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void NVBottomSheetEventEmitter::onDetentChanged(OnDetentChanged event) const {
  dispatchEvent("detentChanged", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "detent", event.detent);
payload.setProperty(runtime, "eventCount", event.eventCount);
    return payload;
  });
}






void NVNavigationStackEventEmitter::onWillNavigateBack(OnWillNavigateBack event) const {
  dispatchEvent("willNavigateBack", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "crumb", event.crumb);
    return payload;
  });
}
void NVNavigationStackEventEmitter::onRest(OnRest event) const {
  dispatchEvent("rest", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "crumb", event.crumb);
payload.setProperty(runtime, "eventCount", event.eventCount);
    return payload;
  });
}

void NVSceneEventEmitter::onPopped(OnPopped event) const {
  dispatchEvent("popped", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void NVSearchBarEventEmitter::onChangeText(OnChangeText event) const {
  dispatchEvent("changeText", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "text", event.text);
payload.setProperty(runtime, "eventCount", event.eventCount);
    return payload;
  });
}
void NVSearchBarEventEmitter::onChangeScopeButton(OnChangeScopeButton event) const {
  dispatchEvent("changeScopeButton", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "scopeButton", event.scopeButton);
payload.setProperty(runtime, "eventCount", event.eventCount);
    return payload;
  });
}
void NVSearchBarEventEmitter::onExpand(OnExpand event) const {
  dispatchEvent("expand", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void NVSearchBarEventEmitter::onCollapse(OnCollapse event) const {
  dispatchEvent("collapse", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}



void NVTabBarItemEventEmitter::onPress(OnPress event) const {
  dispatchEvent("press", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void NVTabBarEventEmitter::onTabSelected(OnTabSelected event) const {
  dispatchEvent("tabSelected", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "tab", event.tab);
payload.setProperty(runtime, "eventCount", event.eventCount);
    return payload;
  });
}
void NVTabBarPagerEventEmitter::onTabSelected(OnTabSelected event) const {
  dispatchEvent("tabSelected", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "tab", event.tab);
payload.setProperty(runtime, "eventCount", event.eventCount);
    return payload;
  });
}
void NVTabBarPagerEventEmitter::onTabSwipeStateChanged(OnTabSwipeStateChanged event) const {
  dispatchEvent("tabSwipeStateChanged", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "swiping", event.swiping);
    return payload;
  });
}
void NVTabBarPagerRTLEventEmitter::onTabSelected(OnTabSelected event) const {
  dispatchEvent("tabSelected", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "tab", event.tab);
payload.setProperty(runtime, "eventCount", event.eventCount);
    return payload;
  });
}
void NVTabBarPagerRTLEventEmitter::onTabSwipeStateChanged(OnTabSwipeStateChanged event) const {
  dispatchEvent("tabSwipeStateChanged", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "swiping", event.swiping);
    return payload;
  });
}




void NVToolbarEventEmitter::onNavigationPress(OnNavigationPress event) const {
  dispatchEvent("navigationPress", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}

} // namespace react
} // namespace facebook
