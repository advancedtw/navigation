
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterH.js
 */
#pragma once

#include <react/renderer/components/view/ViewEventEmitter.h>
#include <jsi/jsi.h>

namespace facebook {
namespace react {

class JSI_EXPORT NVActionBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnExpanded {
      
    };

  struct OnCollapsed {
      
    };

  void onExpanded(OnExpanded value) const;

  void onCollapsed(OnCollapsed value) const;
};
class JSI_EXPORT NVBarButtonEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnPress {
      
    };

  void onPress(OnPress value) const;
};
class JSI_EXPORT NVBottomAppBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnNavigationPress {
      
    };

  void onNavigationPress(OnNavigationPress value) const;
};
class JSI_EXPORT NVBottomSheetEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnDetentChanged {
      int detent;
    int eventCount;
    };

  void onDetentChanged(OnDetentChanged value) const;
};
class JSI_EXPORT NVCollapsingBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVCoordinatorLayoutEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVExtendedFloatingActionButtonEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVFloatingActionButtonEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVLeftBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVNavigationBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVNavigationStackEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnWillNavigateBack {
      int crumb;
    };

  struct OnRest {
      int crumb;
    int eventCount;
    };

  void onWillNavigateBack(OnWillNavigateBack value) const;

  void onRest(OnRest value) const;
};
class JSI_EXPORT NVRightBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVSceneEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnPopped {
      
    };

  void onPopped(OnPopped value) const;
};
class JSI_EXPORT NVSearchBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnChangeText {
      std::string text;
    int eventCount;
    };

  struct OnChangeScopeButton {
      int scopeButton;
    int eventCount;
    };

  struct OnExpand {
      
    };

  struct OnCollapse {
      
    };

  void onChangeText(OnChangeText value) const;

  void onChangeScopeButton(OnChangeScopeButton value) const;

  void onExpand(OnExpand value) const;

  void onCollapse(OnCollapse value) const;
};
class JSI_EXPORT NVSegmentedTabEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVSharedElementEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVStatusBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVTabBarItemEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnPress {
      
    };

  void onPress(OnPress value) const;
};
class JSI_EXPORT NVTabBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnTabSelected {
      int tab;
    int eventCount;
    };

  void onTabSelected(OnTabSelected value) const;
};
class JSI_EXPORT NVTabBarPagerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnTabSelected {
      int tab;
    int eventCount;
    };

  struct OnTabSwipeStateChanged {
      bool swiping;
    };

  void onTabSelected(OnTabSelected value) const;

  void onTabSwipeStateChanged(OnTabSwipeStateChanged value) const;
};
class JSI_EXPORT NVTabBarPagerRTLEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnTabSelected {
      int tab;
    int eventCount;
    };

  struct OnTabSwipeStateChanged {
      bool swiping;
    };

  void onTabSelected(OnTabSelected value) const;

  void onTabSwipeStateChanged(OnTabSwipeStateChanged value) const;
};
class JSI_EXPORT NVTabLayoutEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVTabLayoutRTLEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVTabNavigationEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVTitleBarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  

  
};
class JSI_EXPORT NVToolbarEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnNavigationPress {
      
    };

  void onNavigationPress(OnNavigationPress value) const;
};

} // namespace react
} // namespace facebook
